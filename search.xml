<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vmware虚拟机三种网络连接方式详解</title>
      <link href="/2020/09/04/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/"/>
      <url>/2020/09/04/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Vmware虚拟机三种网络连接方式详解"><a href="#Vmware虚拟机三种网络连接方式详解" class="headerlink" title="Vmware虚拟机三种网络连接方式详解"></a>Vmware虚拟机三种网络连接方式详解</h2><p>​        Vmware为我们提供了三种网络工作模式，它们分别是：<strong>Bridged</strong>（桥接模式）、<strong>NAT</strong>（网络地址转换模式）、<strong>Host-Only</strong>（仅主机模式）。</p><h3 id="一、Bridged（桥接模式）"><a href="#一、Bridged（桥接模式）" class="headerlink" title="一、Bridged（桥接模式）"></a>一、<strong>Bridged</strong>（桥接模式）</h3><p>将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。其网络结构如下图所示：</p><p><img src="/imgs/vmware/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt></p><p>具体操作如下：</p><p>1、首先，安装完系统之后，在开启系统之前，点击“编辑虚拟机设置”来设置网卡模式。</p><p><img src="/imgs/vmware/%E7%BC%96%E8%BE%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE.jpg" alt></p><p>2、  打开虚拟网络编辑器</p><p><img src="/imgs/vmware/%E7%BC%96%E8%BE%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C.jpg" alt></p><p>3、 选择VMnet0，选择桥接模式，桥接到本机可用的网络上（打开网络适配器可以查看）</p><p><img src="/imgs/vmware/%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E4%B8%AD%E5%BF%83%E5%8F%AF%E7%94%A8%E7%BD%91%E7%BB%9C.jpg" alt></p><p>4、检验是否成功</p><blockquote><p>在虚拟机输入 <code>ip addr</code> 命令</p></blockquote><p><img src="/imgs/vmware/%E6%9F%A5%E7%9C%8B%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9Cip.jpg" alt></p><p>inet后的就是虚拟机网络ip地址</p><p>本地主机ping虚拟机ip：</p><p><img src="/imgs/vmware/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BAping%E8%99%9A%E6%8B%9F%E6%9C%BA.jpg" alt></p><p>网络连接成功。</p><h3 id="二、NAT（网络地址转换模式）"><a href="#二、NAT（网络地址转换模式）" class="headerlink" title="二、NAT（网络地址转换模式）"></a>二、<strong>NAT</strong>（网络地址转换模式）</h3><p>如果你的网络ip资源紧缺，但是你又希望你的虚拟机能够联网，这时候NAT模式是最好的选择。NAT模式借助虚拟NAT设备和虚拟DHCP服务器，使得虚拟机可以联网。其网络结构如下图所示：</p><p><img src="/imgs/vmware/NAT%E6%A8%A1%E5%BC%8F.png" alt></p><p>具体操作如下：</p><p>1、打开虚拟机网络编辑器，编辑VMnet8设置NAT模式</p><img src="/imgs/vmware/虚拟网络编辑器.jpg" style="zoom:80%;"><p>2、编辑虚拟机网络适配器，选择NAT模式</p><p><img src="/imgs/vmware/%E7%BC%96%E8%BE%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E5%99%A8%E9%80%89%E6%8B%A9nat%E6%A8%A1%E5%BC%8F.jpg" alt></p><p>3、测试</p><p>开启虚拟机，输入<code>ip addr</code>命令，查看ip</p><p><img src="/imgs/vmware/nat%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C.jpg" alt></p><p>打开Xshell远程连接测试</p><p><img src="/imgs/vmware/NAT%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95.jpg" alt></p><p>成功！</p><p>这就是NAT模式，利用虚拟的NAT设备以及虚拟DHCP服务器来使虚拟机连接外网，而VMware Network Adapter VMnet8虚拟网卡是用来与虚拟机通信的。</p><h3 id="三、Host-Only（仅主机模式）"><a href="#三、Host-Only（仅主机模式）" class="headerlink" title="三、Host-Only（仅主机模式）"></a>三、Host-Only（仅主机模式）</h3><p>Host-Only模式其实就是NAT模式去除了虚拟NAT设备，然后使用VMware Network Adapter VMnet1虚拟网卡连接VMnet1虚拟交换机来与虚拟机通信的，Host-Only模式将虚拟机与外网隔开，使得虚拟机成为一个独立的系统，只与主机相互通讯。其网络结构如下图所示：</p><p><img src="/imgs/vmware/%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F.jpg" alt></p><p>1、打开虚拟网络编辑器，这种VMnet1为仅主机模式</p><p><img src="/imgs/vmware/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E8%BE%91%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F.jpg" alt></p><p>2、设置虚拟机网络适配器为仅主机模式</p><p><img src="/imgs/vmware/%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E9%80%82%E9%85%8D%E5%99%A8.jpg" alt></p><p>3、开启虚拟机测试</p><p>输入命令：<code>ip addr</code></p><p><img src="/imgs/vmware/%E6%B5%8B%E8%AF%95%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F.jpg" alt></p><p>获取到ip但是不能访问外网</p><p>测试Xshell连接：</p><p><img src="/imgs/vmware/%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E6%B5%8B%E8%AF%95%E8%BF%9C%E7%A8%8B.jpg" alt></p><p>连接成功！</p>]]></content>
      
      
      <categories>
          
          <category> Vmware虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2020/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
      <url>/2020/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><h2 id="第1章-：计算机系统概述"><a href="#第1章-：计算机系统概述" class="headerlink" title="第1章 ：计算机系统概述"></a>第1章 ：计算机系统概述</h2><h3 id="1-1-计算机的分类"><a href="#1-1-计算机的分类" class="headerlink" title="1.1 计算机的分类"></a>1.1 计算机的分类</h3><ul><li><p>​    电子模拟计算机</p><p><strong>特点：</strong>数值由连续量来表示，运算过程也是连续的</p></li><li><p>​    电子数字计算机</p><p><strong>特点：</strong>按位运算，并且不连续地跳动运算</p><img src="/imgs/计算机组成原理/数字计算机与模拟计算机的主要区别.jpg" alt="数字计算机与模拟计算机的主要区别" style="zoom:80%;"><ul><li>通用计算机： 性能指标从上到下依次递减<ul><li>超级计算机 ：主要用于科学运算，运算速度每秒万亿次以上，数据存储大，价格贵（天河2号）</li><li>大型机 </li><li>服务器（小型机）</li><li>PC机</li><li>单片机 ：只用一片集成电路做成的计算机，体积小，结构简单，性能指标低，价格便宜</li><li>多核机  ：多余一个处理器的计算机芯片</li></ul></li></ul><img src="/imgs/计算机组成原理/多核机、单片机、PC机、服务器、大型机、超级计算机之间的区别.jpg" alt="多核机、单片机、PC机、服务器、大型机、超级计算机之间的区别" style="zoom: 67%;"><ul><li><p>专用计算机：</p><p>针对某一任务设计的计算机，一般来说其结构比通用计算机简单。</p></li></ul></li></ul><h3 id="1-2-计算机的发展简史"><a href="#1-2-计算机的发展简史" class="headerlink" title="1.2 计算机的发展简史"></a>1.2 计算机的发展简史</h3><p>​    世界上第一台电子数字计算机是1946年在美国宾夕法利亚大学制成，1800多个电子管，30吨，运算速度5000次每秒。</p><h4 id="1-2-1-计算机的五代变化"><a href="#1-2-1-计算机的五代变化" class="headerlink" title="1.2.1 计算机的五代变化"></a>1.2.1 计算机的五代变化</h4><ul><li>​    第一代：1946—1957年，电子管计算机。 <strong>数据处理机开始得到应用。</strong></li><li>​    第二代：1958—1964年，晶体管计算机。<strong>工业控制机开始得到应用。</strong></li><li>​    第三代：1965—1971年，中小规模集成电路计算机。<strong>小型计算机开始出现。</strong></li><li>​    第四代：1972—1990年，大规模和超大规模集成电路计算机。<strong>微型计算机开始出现。</strong></li><li>​    第五代：1991年开始的巨大规模集成电路计算机。<strong>单片机开始出现。</strong></li></ul><h4 id="1-2-2-半导体储存器的发展"><a href="#1-2-2-半导体储存器的发展" class="headerlink" title="1.2.2 半导体储存器的发展"></a>1.2.2 半导体储存器的发展</h4><p>​    20世纪50—60年代，所有计算机的储存器都是由微小的铁磁体环（磁芯）做成。每个磁芯约1mm。</p><p>从1970年开始，半导体储存器经历了11代：单个芯片1KB、4KB、16KB、64KB、256KB、1MB、4MB、16MB、64MB、256MB、和现在的1G （2013年）。其中 1K=2^10、1M=2^20、1G=2^30。</p><h4 id="1-2-3-微处理器的发展"><a href="#1-2-3-微处理器的发展" class="headerlink" title="*1.2.3 微处理器的发展 *"></a>*<em>1.2.3 微处理器的发展 *</em></h4><p>​    1971年Intel公司开发出Intel 4004。这是第一个将CPU的所有元件都放入同一块芯片内的产品，于是，微处理器诞生了。</p><pre><code> 微处理器演变中的另一个主要进步是1972年出现的Intel 8008，这是第一个8位微处理器，它比4004复杂一倍。</code></pre><p>​    1974年出现了Intel 8080。这是第一个通用微处理器，而4004和8008是为特殊用途而设计的。8080是为通用微机而设计的中央处理器。</p><pre><code> 20世纪70年代末才出现强大的通用16位微处理器，8086便是其中之一。 这一发展趋势中的另一阶段是在1981年，贝尔实验室和HP公司开发出了32位单片微处理器。</code></pre><p>​     Intel于1985年推出了32位微处理器Intel 80386。</p><pre><code> 到现在的64位处理器和多核处理器。</code></pre><h4 id="1-2-4-计算机的性能指标"><a href="#1-2-4-计算机的性能指标" class="headerlink" title="1.2.4 计算机的性能指标"></a>1.2.4 计算机的性能指标</h4><ul><li><p><strong>吞吐量：</strong>表征一台计算机在某一时间间隔内能够处理的信息量。</p></li><li><p><strong>响应时间：</strong>表征从输入有效到系统产生响应之间的<strong>时间度量</strong>，用时间单位来表示。</p></li><li><p><strong>利用率：</strong>在给定的时间间隔内系统被实际利用的时间所占的比率，用百分比表示。</p></li><li><p><strong>处理机字长（机器字长）：</strong>指处理机运算器中<strong>一次</strong>能够完成二进制数运算的位数，如32位、64位。</p></li><li><p><strong>总线宽度：</strong>一般指CPU中运算器与储存器之间进行互连的<strong>内部总线二进制位数</strong>。</p></li><li><p><strong>存储器容量：</strong>存储器中所有存储单元的总数目，通常用<strong>KB、MB、GB、TB</strong>来表示。</p></li><li><p><strong>存储器带宽：</strong>单位时间内从存储器读出的二进制数信息量，一般用<strong>字节/秒</strong>表示。</p></li><li><p><strong>主频/时钟周期：</strong>CPU的工作节拍受主时钟控制，主时钟不断产生固定频率的时钟，主时钟的频率（f）叫<strong>CPU的主频。</strong>度量单位是MHz（兆赫兹）、GHz（吉赫兹）。</p></li><li><p><strong>CPU执行时间：</strong>表示CPU执行一般程序所占用的CPU时间：<br>$$<br>CPU执行时间 = CPU时钟周期数 × CPU时钟周期（1/f）<br>$$</p></li><li><p><strong>CPI：</strong>表示每条指令周期数，即执行一条指令所需的平均时钟周期数：<br>$$<br>CPI = 执行某段程序所需的CPU时钟周期数 ÷ 程序包含的指令条数<br>$$</p></li><li><p><strong>MIPS：</strong>表示平均每秒执行多少百万条定点指令数：<br>$$<br>MIPS = 指令数 ÷ （程序执行时间 × 10^6）<br>$$</p></li><li><p><strong>FLOPS：</strong>表示每秒执行浮点操作的次数，用来衡量计算机浮点操作的性能：<br>$$<br>FLOPS = 程序中的浮点操作次数 ÷ 程序执行时间（s）<br>$$</p></li></ul><h3 id="1-3-计算机的硬件"><a href="#1-3-计算机的硬件" class="headerlink" title="1.3 计算机的硬件"></a>1.3 计算机的硬件</h3>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA程序设计-JDK安装及环境配置</title>
      <link href="/2019/08/29/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-JDK%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/08/29/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-JDK%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="JDK的安装"><a href="#JDK的安装" class="headerlink" title="JDK的安装"></a>JDK的安装</h3><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p>打开<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">JDK下载</a></p><blockquote><p>找到要下载的版本和对应的操作系统，点击下载</p></blockquote><p><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%851.png" alt="下载演示"></p><h5 id="安装（傻瓜式）"><a href="#安装（傻瓜式）" class="headerlink" title="安装（傻瓜式）"></a>安装（傻瓜式）</h5><blockquote><p>安装目录可自定义</p></blockquote><p><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%852.png" alt="安装演示"></p><h5 id="Win系统下JAVA环境变量的配置"><a href="#Win系统下JAVA环境变量的配置" class="headerlink" title="Win系统下JAVA环境变量的配置"></a>Win系统下JAVA环境变量的配置</h5><blockquote><p>安装好JDK后我们还需要配置环境变量</p><ul><li>单击Win按键，也就是打开左下角菜单，输入高级设置，会出现查看系统高级设置，点击进去。也可以打开计算机，右键选择属性，然后系统高级设置</li><li>点击环境变量，在<strong>系统变量</strong>下新建变量JAVA_HOME，变量值为JDK安装路径。再新建CLASSPATH变量，变量值为<strong>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tool.jar</strong>注意前面有一点</li></ul></blockquote><p><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%853.png" alt="新建系统环境变量"><br><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%854.png" alt="新建系统环境变量"></p><blockquote><p>在path中添加环境变量</p><ul><li>将%JAVA_HOME%\bin和%CLASSPATH%变量添加到path中</li></ul></blockquote><p><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%855.png" alt="在path中添加环境变量"></p><h5 id="检验是否安装成功"><a href="#检验是否安装成功" class="headerlink" title="检验是否安装成功"></a>检验是否安装成功</h5><blockquote><p>打开cmd，输入java，显示详细信息，输入javac，显示详细信息则表示配置成功</p></blockquote><p><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%856-1.png" alt="检验安装"><br><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%856-2.png" alt="检验安装"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> JAVA学习 </tag>
            
            <tag> JDK安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript监听事件</title>
      <link href="/2019/07/16/JavaScript%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/07/16/JavaScript%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="事件的概念："><a href="#事件的概念：" class="headerlink" title="事件的概念："></a>事件的概念：</h3><p>JavaScript使我们有能力创建动态页面，网页中的每一个元素都可以产生某些触发JavaScript函数的事件。我们可以认为事件是可以被JavaScript侦测到的一种行为。</p><h3 id="事件流："><a href="#事件流：" class="headerlink" title="事件流："></a>事件流：</h3><p>事件流主要分为冒泡型事件和捕获型事件。IE浏览器目前只支持冒泡型事件，而支持标准DOM的浏览器比如火狐、Chrome等两者都支持。</p><h3 id="使用返回值改变HTML元素的默认行为："><a href="#使用返回值改变HTML元素的默认行为：" class="headerlink" title="使用返回值改变HTML元素的默认行为："></a>使用返回值改变HTML元素的默认行为：</h3><p>HTML元素大都包含了自己的默认行为，例如：超链接、提交按钮等。我们可以通过在绑定事件中加上”return false”来阻止它的默认行为。</p><p><img src="/imgs/jiantin.png" alt="jiantin"></p><h3 id="通用性的事件监听方法："><a href="#通用性的事件监听方法：" class="headerlink" title="通用性的事件监听方法："></a>通用性的事件监听方法：</h3><ol><li>绑定HTML元素属性：</li></ol><p>　　　<code>&lt;input type=&quot;button&quot; value=&quot;clickMe&quot; onclick=&quot;check(this)&quot;&gt;</code></p><ol start="2"><li>绑定DOM对象属性：</li></ol><p>　　　<code>document.getElementById(&quot;xxx&quot;).onclick=test;</code></p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>JavaScript两种通用性的绑定事件的方式<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"绑定HTML元素属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"绑定DOM对象属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>百度<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>超链接有自己的默认行为，即当点击的时候会跳转页面。若是要把默认行为给去掉，可以绑定一个onclick事件，        onclick<span class="token operator">=</span><span class="token string">"return false"</span>。这样点击就不会跳转页面了。<span class="token operator">--</span><span class="token operator">></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>测试1<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span></span>测试<span class="token number">2</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span>test2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处不能加括号，加了括号表示调用函数。</span>            <span class="token comment" spellcheck="true">/*注意：函数需要通过后面的触发才会调用执行，而上面这句没有放在函数里面，JavaScript从上往下解析的时候，解析到上面的那句代码，　　　　　　　　若还没有解析到&lt;body>中的id--test2,就会报错。故JavaScript代码要放在后面。*/</span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
