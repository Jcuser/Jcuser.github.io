<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java序列化实践</title>
      <link href="/2022/01/25/java%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/01/25/java%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是java序列化和反序列化"><a href="#1-什么是java序列化和反序列化" class="headerlink" title="1.什么是java序列化和反序列化"></a>1.什么是java序列化和反序列化</h2><p>序列化：将java对象转换为字节序列</p><p>反序列化：将字节序列转换为java对象</p><p>为什么要做序列化：序列化对象，可以使得对象可以保存在磁盘中或者可以通过网络进行传输，对象不必依赖程序而存在，反序列化对象可以将字节序列转换成原来的对象。</p><h2 id="2-序列化方式实现"><a href="#2-序列化方式实现" class="headerlink" title="2.序列化方式实现"></a>2.序列化方式实现</h2><ul><li><h4 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h4></li></ul><p>如果你想要将对象保存到文件中或者通过网络传输，那么该对象的类就要实现<code>Serializable</code>接口</p><p>实践：</p><p>创建一个java类Student：实现了Serializable接口,</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略getter setter 构造函数</span>    <span class="token comment" spellcheck="true">//......</span><span class="token punctuation">}</span></code></pre><p>创建一个main方法，在main方法中测试。</p><p>首先创建一个Student的实例，创建<code>ObjectOutputStream</code>输出流，然后调用ObjectOutputStream的<code>writeObject()</code>方法将studen对象序列化到test.txt文件中。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建一个输对象出流</span>            ObjectOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>执行，在src文件夹下生成了test.txt文件，我们打开看看</p><p><img src="/imgs/java%E5%BA%8F%E5%88%97%E5%8C%96/image-20220124170558806.png" alt="image-20220124170558806"></p><p>中文乱码了，查看文件编码为<code>ANSI</code>编码。我们先不管，再反序列化一下看看能不能反序列化回来。</p><pre class=" language-java"><code class="language-java"> ObjectInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Student student2 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> inputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反序列化："</span><span class="token operator">+</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/imgs/java%E5%BA%8F%E5%88%97%E5%8C%96/image-20220124171958424.png" alt="反序列化结果"></p><p>从结果可以看出是可以序列化是成功了。</p><blockquote><p>有一点注意的是，反序列化时不会调用构造方法。</p></blockquote><p>属性为引用数据类型的对象，如果要序列化，那么该属性也要实现<code>Serializable</code>接口才能实现该对象的完全序列化，否则就会报错<code>NotSerializableException</code></p><p>新增一个Class(班级)类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Class</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String className<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Student新增Calss属性</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Class <span class="token class-name">aClass</span><span class="token punctuation">;</span></code></pre><p><img src="/imgs/java%E5%BA%8F%E5%88%97%E5%8C%96/image-20220124220613878.png" alt="image-20220124220613878"></p><p>Class实现Serializable接口，调用序列化和反序列化</p><p><img src="/imgs/java%E5%BA%8F%E5%88%97%E5%8C%96/image-20220124221119124.png" alt="image-20220124221119124"></p><ul><li>java序列化算法</li></ul><ol><li>所有保存到磁盘的对象都有一个序列化编号</li><li>当程序试图序列化一个对象时，会先检查此对象是否已经序列化过，只有此对象从未（在此虚拟机）被序列化过，才会将此对象序列化为字节序列输出。</li><li>如果此对象已经序列化过，则直接输出编号即可。</li></ol><ul><li>序列化存在的问题</li></ul><p>由于序列化时不会重复序列化同一个对象，所以对象第一次被序列化之后，后面对对象进行了修改再次序列化时得到的</p><p>还是原来的序列化对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String name<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"sss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class <span class="token class-name">aClass</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">(</span><span class="token string">"1班"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>            Student student1 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> inputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反序列化："</span><span class="token operator">+</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>            aClass<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span><span class="token string">"2班"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            student<span class="token punctuation">.</span><span class="token function">setaClass</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>            Student student2 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> inputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反序列化："</span><span class="token operator">+</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>输出结果：</p><p><img src="/imgs/java%E5%BA%8F%E5%88%97%E5%8C%96/image-20220124223452451.png" alt="image-20220124223452451"></p><p>可以看出我修改后再序列化，反序列化回来的对象还是和第一次一样。</p><ul><li><code>transient</code>关键字</li></ul><p>如果我们希望有些类的成员不被序列化，可以使用transient关键字修饰。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Class <span class="token class-name">aClass</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><blockquote><p>反序列化：Student{name=’null’, age=18, aClass=Class{className=’1班’, nums=40}}</p></blockquote><p>使用transient修饰的属性，java序列化时，会忽略掉此字段，所以反序列化出的对象，被transient修饰的属性是默认值。对于引用类型，值是null；基本类型，值是0；boolean类型，值是false。</p><p>此外，你可以通过重新writeObject()和readObject()方法实现自己的序列化方法。</p><ul><li>序列化版本号serialVersionUID</li></ul><p>随着项目的升级，java序列化的class文件会改变，那么序列化怎么保证前后兼容性呢？java序列化提供了一个private static final long serialVersionUID 的序列化版本号，只有版本号相同，即使更改了序列化属性，对象也可以正确被反序列化回来。</p><p>我们先给Student一个序列化版本号，然后把Student序列化保存到stu.txt文件中。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Class <span class="token class-name">aClass</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后修改，把age的类型改成long;</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1001L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Class <span class="token class-name">aClass</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InvalidClassException<span class="token operator">:</span> 更文挑战<span class="token punctuation">.</span>day01<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span>Student<span class="token punctuation">;</span> local <span class="token keyword">class</span> <span class="token class-name">incompatible</span><span class="token operator">:</span> stream classdesc serialVersionUID <span class="token operator">=</span> <span class="token number">8678683859078700039</span><span class="token punctuation">,</span> local <span class="token keyword">class</span> <span class="token class-name">serialVersionUID</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3533377131204334585</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectStreamClass<span class="token punctuation">.</span><span class="token function">initNonProxy</span><span class="token punctuation">(</span>ObjectStreamClass<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">699</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">.</span><span class="token function">readNonProxyDesc</span><span class="token punctuation">(</span>ObjectInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1885</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">.</span><span class="token function">readClassDesc</span><span class="token punctuation">(</span>ObjectInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1751</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">.</span><span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span>ObjectInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2042</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">.</span><span class="token function">readObject0</span><span class="token punctuation">(</span>ObjectInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1573</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">431</span><span class="token punctuation">)</span>    at 更文挑战<span class="token punctuation">.</span>day01<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span>Main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span></code></pre><p>Student加上序列号版本号</p><p>输出结果：</p><blockquote><p>反序列化：Student{name=’null’, age=18, aClass=Class{className=’1班’, nums=40}}</p></blockquote><p>虽然我改变了类，但是因为我定义的序列号版本号相同，所以还是反序列化成功，由于我比较好奇如果类型不兼容会怎样，于是我定义了序列化版本号，先序列化保存到文件，修改Student类的age类型为String。</p><p>输出反序列化结果：</p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InvalidClassException<span class="token operator">:</span> 更文挑战<span class="token punctuation">.</span>day01<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span>Student<span class="token punctuation">;</span> incompatible types <span class="token keyword">for</span> field age    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectStreamClass<span class="token punctuation">.</span><span class="token function">matchFields</span><span class="token punctuation">(</span>ObjectStreamClass<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2453</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectStreamClass<span class="token punctuation">.</span><span class="token function">getReflector</span><span class="token punctuation">(</span>ObjectStreamClass<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2347</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectStreamClass<span class="token punctuation">.</span><span class="token function">initNonProxy</span><span class="token punctuation">(</span>ObjectStreamClass<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">753</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">.</span><span class="token function">readNonProxyDesc</span><span class="token punctuation">(</span>ObjectInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1885</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">.</span><span class="token function">readClassDesc</span><span class="token punctuation">(</span>ObjectInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1751</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">.</span><span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span>ObjectInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2042</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">.</span><span class="token function">readObject0</span><span class="token punctuation">(</span>ObjectInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1573</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">431</span><span class="token punctuation">)</span>    at 更文挑战<span class="token punctuation">.</span>day01<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span>Main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span></code></pre><p>类型不兼容，反序列化失败。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>需要网络传输的对象的类需要实现Serializable接口。</li><li>对象的类名、实例变量（包括基本类型，数组，对其他对象的引用）都会被序列化；方法、类变量、transient实例变量都不会被序列化。</li><li>使用transient修饰变量不会被序列化。</li><li>序列化对象的引用类型成员变量，也必须是可序列化的，不然会报错。</li><li>同一对象序列化多次，只有第一次序列化为二进制流，以后都只是保存序列化编号，不会重复序列化。</li><li>建议所有可序列化的类加上serialVersionUID 版本号，方便项目升级。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vmware虚拟机三种网络连接方式详解</title>
      <link href="/2020/09/04/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/"/>
      <url>/2020/09/04/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="Vmware虚拟机三种网络连接方式详解"><a href="#Vmware虚拟机三种网络连接方式详解" class="headerlink" title="Vmware虚拟机三种网络连接方式详解"></a>Vmware虚拟机三种网络连接方式详解</h2><p>​        Vmware为我们提供了三种网络工作模式，它们分别是：<strong>Bridged</strong>（桥接模式）、<strong>NAT</strong>（网络地址转换模式）、<strong>Host-Only</strong>（仅主机模式）。</p><h3 id="一、Bridged（桥接模式）"><a href="#一、Bridged（桥接模式）" class="headerlink" title="一、Bridged（桥接模式）"></a>一、<strong>Bridged</strong>（桥接模式）</h3><p>将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。其网络结构如下图所示：</p><p><img src="/imgs/vmware/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt></p><p>具体操作如下：</p><p>1、首先，安装完系统之后，在开启系统之前，点击“编辑虚拟机设置”来设置网卡模式。</p><p><img src="/imgs/vmware/%E7%BC%96%E8%BE%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE.jpg" alt></p><p>2、  打开虚拟网络编辑器</p><p><img src="/imgs/vmware/%E7%BC%96%E8%BE%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C.jpg" alt></p><p>3、 选择VMnet0，选择桥接模式，桥接到本机可用的网络上（打开网络适配器可以查看）</p><p><img src="/imgs/vmware/%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E4%B8%AD%E5%BF%83%E5%8F%AF%E7%94%A8%E7%BD%91%E7%BB%9C.jpg" alt></p><p>4、检验是否成功</p><blockquote><p>在虚拟机输入 <code>ip addr</code> 命令</p></blockquote><p><img src="/imgs/vmware/%E6%9F%A5%E7%9C%8B%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9Cip.jpg" alt></p><p>inet后的就是虚拟机网络ip地址</p><p>本地主机ping虚拟机ip：</p><p><img src="/imgs/vmware/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BAping%E8%99%9A%E6%8B%9F%E6%9C%BA.jpg" alt></p><p>网络连接成功。</p><h3 id="二、NAT（网络地址转换模式）"><a href="#二、NAT（网络地址转换模式）" class="headerlink" title="二、NAT（网络地址转换模式）"></a>二、<strong>NAT</strong>（网络地址转换模式）</h3><p>如果你的网络ip资源紧缺，但是你又希望你的虚拟机能够联网，这时候NAT模式是最好的选择。NAT模式借助虚拟NAT设备和虚拟DHCP服务器，使得虚拟机可以联网。其网络结构如下图所示：</p><p><img src="/imgs/vmware/NAT%E6%A8%A1%E5%BC%8F.png" alt></p><p>具体操作如下：</p><p>1、打开虚拟机网络编辑器，编辑VMnet8设置NAT模式</p><img src="/imgs/vmware/虚拟网络编辑器.jpg" style="zoom:80%;"><p>2、编辑虚拟机网络适配器，选择NAT模式</p><p><img src="/imgs/vmware/%E7%BC%96%E8%BE%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E5%99%A8%E9%80%89%E6%8B%A9nat%E6%A8%A1%E5%BC%8F.jpg" alt></p><p>3、测试</p><p>开启虚拟机，输入<code>ip addr</code>命令，查看ip</p><p><img src="/imgs/vmware/nat%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C.jpg" alt></p><p>打开Xshell远程连接测试</p><p><img src="/imgs/vmware/NAT%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%B5%8B%E8%AF%95.jpg" alt></p><p>成功！</p><p>这就是NAT模式，利用虚拟的NAT设备以及虚拟DHCP服务器来使虚拟机连接外网，而VMware Network Adapter VMnet8虚拟网卡是用来与虚拟机通信的。</p><h3 id="三、Host-Only（仅主机模式）"><a href="#三、Host-Only（仅主机模式）" class="headerlink" title="三、Host-Only（仅主机模式）"></a>三、Host-Only（仅主机模式）</h3><p>Host-Only模式其实就是NAT模式去除了虚拟NAT设备，然后使用VMware Network Adapter VMnet1虚拟网卡连接VMnet1虚拟交换机来与虚拟机通信的，Host-Only模式将虚拟机与外网隔开，使得虚拟机成为一个独立的系统，只与主机相互通讯。其网络结构如下图所示：</p><p><img src="/imgs/vmware/%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F.jpg" alt></p><p>1、打开虚拟网络编辑器，这种VMnet1为仅主机模式</p><p><img src="/imgs/vmware/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BC%96%E8%BE%91%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F.jpg" alt></p><p>2、设置虚拟机网络适配器为仅主机模式</p><p><img src="/imgs/vmware/%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E9%80%82%E9%85%8D%E5%99%A8.jpg" alt></p><p>3、开启虚拟机测试</p><p>输入命令：<code>ip addr</code></p><p><img src="/imgs/vmware/%E6%B5%8B%E8%AF%95%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F.jpg" alt></p><p>获取到ip但是不能访问外网</p><p>测试Xshell连接：</p><p><img src="/imgs/vmware/%E4%BB%85%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%E6%B5%8B%E8%AF%95%E8%BF%9C%E7%A8%8B.jpg" alt></p><p>连接成功！</p>]]></content>
      
      
      <categories>
          
          <category> Vmware虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA程序设计-JDK安装及环境配置</title>
      <link href="/2019/08/29/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-JDK%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/08/29/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-JDK%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="JDK的安装"><a href="#JDK的安装" class="headerlink" title="JDK的安装"></a>JDK的安装</h3><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p>打开<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">JDK下载</a></p><blockquote><p>找到要下载的版本和对应的操作系统，点击下载</p></blockquote><p><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%851.png" alt="下载演示"></p><h5 id="安装（傻瓜式）"><a href="#安装（傻瓜式）" class="headerlink" title="安装（傻瓜式）"></a>安装（傻瓜式）</h5><blockquote><p>安装目录可自定义</p></blockquote><p><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%852.png" alt="安装演示"></p><h5 id="Win系统下JAVA环境变量的配置"><a href="#Win系统下JAVA环境变量的配置" class="headerlink" title="Win系统下JAVA环境变量的配置"></a>Win系统下JAVA环境变量的配置</h5><blockquote><p>安装好JDK后我们还需要配置环境变量</p><ul><li>单击Win按键，也就是打开左下角菜单，输入高级设置，会出现查看系统高级设置，点击进去。也可以打开计算机，右键选择属性，然后系统高级设置</li><li>点击环境变量，在<strong>系统变量</strong>下新建变量JAVA_HOME，变量值为JDK安装路径。再新建CLASSPATH变量，变量值为<strong>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tool.jar</strong>注意前面有一点</li></ul></blockquote><p><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%853.png" alt="新建系统环境变量"><br><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%854.png" alt="新建系统环境变量"></p><blockquote><p>在path中添加环境变量</p><ul><li>将%JAVA_HOME%\bin和%CLASSPATH%变量添加到path中</li></ul></blockquote><p><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%855.png" alt="在path中添加环境变量"></p><h5 id="检验是否安装成功"><a href="#检验是否安装成功" class="headerlink" title="检验是否安装成功"></a>检验是否安装成功</h5><blockquote><p>打开cmd，输入java，显示详细信息，输入javac，显示详细信息则表示配置成功</p></blockquote><p><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%856-1.png" alt="检验安装"><br><img src="/imgs/JAVA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/JDK%E5%AE%89%E8%A3%85/JDK%E5%AE%89%E8%A3%856-2.png" alt="检验安装"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> JAVA学习 </tag>
            
            <tag> JDK安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript监听事件</title>
      <link href="/2019/07/16/JavaScript%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/07/16/JavaScript%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="事件的概念："><a href="#事件的概念：" class="headerlink" title="事件的概念："></a>事件的概念：</h3><p>JavaScript使我们有能力创建动态页面，网页中的每一个元素都可以产生某些触发JavaScript函数的事件。我们可以认为事件是可以被JavaScript侦测到的一种行为。</p><h3 id="事件流："><a href="#事件流：" class="headerlink" title="事件流："></a>事件流：</h3><p>事件流主要分为冒泡型事件和捕获型事件。IE浏览器目前只支持冒泡型事件，而支持标准DOM的浏览器比如火狐、Chrome等两者都支持。</p><h3 id="使用返回值改变HTML元素的默认行为："><a href="#使用返回值改变HTML元素的默认行为：" class="headerlink" title="使用返回值改变HTML元素的默认行为："></a>使用返回值改变HTML元素的默认行为：</h3><p>HTML元素大都包含了自己的默认行为，例如：超链接、提交按钮等。我们可以通过在绑定事件中加上”return false”来阻止它的默认行为。</p><p><img src="/imgs/jiantin.png" alt="jiantin"></p><h3 id="通用性的事件监听方法："><a href="#通用性的事件监听方法：" class="headerlink" title="通用性的事件监听方法："></a>通用性的事件监听方法：</h3><ol><li>绑定HTML元素属性：</li></ol><p>　　　<code>&lt;input type=&quot;button&quot; value=&quot;clickMe&quot; onclick=&quot;check(this)&quot;&gt;</code></p><ol start="2"><li>绑定DOM对象属性：</li></ol><p>　　　<code>document.getElementById(&quot;xxx&quot;).onclick=test;</code></p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>JavaScript两种通用性的绑定事件的方式<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            <span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"绑定HTML元素属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"绑定DOM对象属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>百度<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>超链接有自己的默认行为，即当点击的时候会跳转页面。若是要把默认行为给去掉，可以绑定一个onclick事件，        onclick<span class="token operator">=</span><span class="token string">"return false"</span>。这样点击就不会跳转页面了。<span class="token operator">--</span><span class="token operator">></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>测试1<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test1()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span></span>测试<span class="token number">2</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span>test2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处不能加括号，加了括号表示调用函数。</span>            <span class="token comment" spellcheck="true">/*注意：函数需要通过后面的触发才会调用执行，而上面这句没有放在函数里面，JavaScript从上往下解析的时候，解析到上面的那句代码，　　　　　　　　若还没有解析到&lt;body>中的id--test2,就会报错。故JavaScript代码要放在后面。*/</span>        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
